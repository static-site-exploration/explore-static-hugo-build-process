# pull the latest content

# build using the prepared implimentation image

# push to distribution repo

# deploy (if needed)


#
# Google Cloud Builder CI configuration
#

options:

    substitution_option: 'ALLOW_LOOSE'


steps:

# GET THE CONTENT REPO CREDENTIALS and SETUP FROM THE BUILDER IMAGE


# SETUP WORKSPACE DIRECTORIES

- name: 'gcr.io/cloud-builders/git'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    mkdir -p /workspace/content
    mkdir -p /workspace/build
    mkdir -p /workspace/dist
    mkdir -p /workspace/data


# SETUP THE CONTENT FOR THE BUILD

# Pull the content (Use https for now, no keys needed)
- name: 'gcr.io/cloud-builders/git'
  args:
  - 'clone'
  - '$_CONTENT_GIT_REPO_HTTP_LOCATION'
  - '/content/repo'

- name: 'gcr.io/cloud-builders/git'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    find /content/repo type -d 

# Save the last commit sha value in a workspace file, accessable by future steps
#- name: 'gcr.io/cloud-builders/git'
#  entrypoint: 'bash'
#  args:
#  - '-c'
#  - |
#    git -C /workspace/content rev-parse HEAD > /workspace/data/CONTENT_LATEST_COMMIT_SHA.txt
#    echo "Displaying value of: /workspace/data/CONTENT_LATEST_COMMIT_SHA.txt"
#    cat /workspace/data/CONTENT_LATEST_COMMIT_SHA.txt

# BUILD SITE PACKAGE

# Test run the site specific build container (without arguments should build locally with test content and paths)
#- name: '$_SITE_BUILD_CONTAINER'

# Run the build using the site specific build container
- name: '$_SITE_BUILD_CONTAINER'
  args:
  # feed in arguments i) build location path, ii) content path iii) repo base folder
  #- '--contentDir'
  # DO NOT INCLUDE /workspace !! currently wont work
  - './content/repo/$_DIR_NAME_CONTENT'
  #- '--destination'
  - './workspace/build'

# Check the build is in the right place
- name: 'gcr.io/cloud-builders/git'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    find /workspace/build/.

# Create some content for testing git commit and push
- name: 'gcr.io/cloud-builders/git'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    \
    cat <<EOF >/workspace/content/some-content.test.md
    '#' This is a test markdown file
    '##' With some content
    For testing purposes
    EOF
    \
    echo "Directory listing for: /workspace/content"
    ls -a /workspace/content


# SETUP KEYS FOR GIT DIST REPO

# Copy the encrypted file from GCS
- name: 'gcr.io/cloud-builders/gsutil'
  args: ['cp', '$_DIST_GIT_SSH_KEY_GCS_URL', '/workspace/tmp/encrypted_key/id_rsa_dist.enc']
  volumes:
  - name: 'ssh'
    path: '/root/.ssh'
    
# Decrypt files in the persisted volume
- name: 'gcr.io/cloud-builders/gcloud'
  args:
  - kms
  - decrypt
  - --ciphertext-file=/workspace/tmp/encrypted_key/id_rsa_dist.enc
  - --plaintext-file=/root/.ssh/id_rsa_dist
  - --location=global
  - --keyring=$_DIST_GIT_SSH_KEY_KMS_KEYRING
  - --key=$_DIST_GIT_SSH_KEY_KMS_KEY
  volumes:
  - name: 'ssh'
    path: '/root/.ssh'

# Add GitHub to known hosts and set up git with key and domain
- name: 'gcr.io/cloud-builders/git' 
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    rm -f /workspace/tmp/encrypted_key/id_rsa_dist.enc
    rm -rf /workspace/tmp
    \
    ssh-keyscan -t rsa github.com > /root/.ssh/known_hosts
    \
    cat <<EOF >/root/.ssh/config
    SendEnv SSHPASS
    Hostname github.com
    User git
    IdentityFile /root/.ssh/id_rsa_dist
    EOF
    \
    chmod 600 /root/.ssh/* 
    chmod 644 /root/.ssh/config
    \
    #ssh -xvvv git@github.com
  volumes:
  - name: 'ssh'
    path: /root/.ssh


# SETUP DIST GIT AND PUSH THE PACKAGE

# Clone the distribution repo
- name: 'gcr.io/cloud-builders/git'
  args:
  - 'clone'
  - '$_DIST_GIT_REPO_LOCATION_SSH'
  - '/workspace/dist'
  volumes:
  - name: 'ssh'
    path: /root/.ssh

# Empty the cloned dist directory and add the recently built files 
- name: 'gcr.io/cloud-builders/git'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    echo "Post clone dist: Directory listing for: /workspace/dist"
    ls -a /workspace/dist
    \
    # clean out prepared git dist dir
    #rm -rf /workspace/dist/*
    \
    # ONLY FOR TESTING!
    cp -a /workspace/content/. /workspace/dist
    \
    # copy files
    cp -a /workspace/build/. /workspace/dist
    echo "Post copy build: Directory listing for: /workspace/dist"
    ls -a /workspace/dist

# Display status (for testing)
- name: 'gcr.io/cloud-builders/git'
  args:
  - '-C'
  - '/workspace/dist'
  - 'status'

# Add the files to git
- name: 'gcr.io/cloud-builders/git'
  args:
  - '-C'
  - '/workspace/dist'
  - 'add'
  - '--all'

# Display status (for testing)
#- name: 'gcr.io/cloud-builders/git'
#  args:
#  - '-C'
#  - '/workspace/dist'
#  - 'status'

# Setup credentials for local dist repo
- name: 'gcr.io/cloud-builders/git'
  args:
  - '-C'
  - '/workspace/dist'
  - 'config'
  - 'user.name'
  - '$_GIT_COMMITTER_NAME'

- name: 'gcr.io/cloud-builders/git'
  args:
  - '-C'
  - '/workspace/dist'
  - 'config'
  - 'user.email'
  - '$_GIT_COMMITTER_EMAIL'

# Commit the files to local
- name: 'gcr.io/cloud-builders/git'
  args:
  - '-C'
  - '/workspace/dist'
  - 'commit'
  - '-m'
  - 'Commiting files to dist'
  # could use git commit template and variables
  
 #- 'GIT_AUTHOR_NAME=$_GIT_AUTHOR_NAME'
 #- 'GIT_AUTHOR_EMAIL=$_GIT_AUTHOR_EMAIL'

# Display status (for testing)
#- name: 'gcr.io/cloud-builders/git'
#  args:
#  - '-C'
#  - '/workspace/dist'
#  - 'status'

# Push to remote
- name: 'gcr.io/cloud-builders/git'
  args:
  - '-C'
  - '/workspace/dist'
  - 'push'
  - '--force'
  - '--set-upstream'
  - 'origin'
  - 'master'
  volumes:
  - name: 'ssh'
    path: /root/.ssh

